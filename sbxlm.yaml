# 声笔系列码共用配置

# 所有方案都能用的顶功
basic_popping:
  __append:
    # 顶标点
    - match: ".*[^a-z0-9]"
      accept: "[bpmfdtnlgkhjqxzcsrywv]"
    # 标点大写顶
    - match: ".*[a-z0-9;']"
      accept: "[^a-z0-9;' ]"

# 字词方案通用的顶功
table_popping:
  __append:
    # 单字三码顶
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z][aeiou]+"
      accept: "[bpmfdtnlgkhjqxzcsrywv]"
    # 单字模式下的单字二码顶
    - when: "pro_char"
      match: "[bpmfdtnlgkhjqxzcsrywv][a-z]"
      accept: "[bpmfdtnlgkhjqxzcsrywv]"
    # 单字模式下的兼容打词
    - when: "pro_char"
      match: "[bpmfdtnlgkhjqxzcsrywv][a-z]"
      accept: "[BPMFDTNLGKHJQXZCSRYWV]"
      strategy: append
    # 顶末码
    - match: "[bpmfdtnlgkhjqxzcsrywv].+[;'0-9]"
      accept: "[^ ]"
    # 自定义
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z]?[;'0-9][aeuio]*"
      accept: "[aeuio]"
      strategy: append
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z]?[;'0-9][aeuio]*"
      accept: "[^ aeuio]"
    # 增强模式，数字一码或二码之后不顶
    - when: is_enhanced
      match: "[bpmfdtnlgkhjqxzcsrywv][a-z]?"
      accept: "[0-9]"
      strategy: append
    # 其他情况，数字顶
    - match: ".*"
      accept: "[0-9]"
    # 大写顶屏
    - match: "([bpmfdtnlgkhjqxzcsrywv][a-z]){2}"
      accept: "[BPMFDTNLGKHJQXZCSRYWV]"
      prefix: 2
    # 大写补码
    - match: "([bpmfdtnlgkhjqxzcsrywv][a-z]){2}[aeiou]{0,2}[AEUIO]?"
      accept: "[AEUIO]"
      strategy: append

prelude:
  menu:
    page_size: 6
    alternative_select_keys: "_aeuio"
    alternative_select_labels: ["", "", "", "", "", ""]
    select_comment_pattern: "^[a-z]{4,}|[a-z]{3}[0-9][aeuio]{1,}$"

  simplifier:
    opencc_config: s2t.json
    option_name: zh_trad

  sbzdy:
    tag: sbzdy
    dictionary: ""
    user_dict: sbzdy
    db_class: stabledb
    enable_sentence: false
    enable_completion: true
    prefix: u
    tips: "〔自定义〕"

  history:
    tag: history
    input: "/"
    size: 5
    initial_quality: -1

  bihua:
    tag: bihua
    dictionary: bihua
    enable_user_dict: false
    enable_encoder: false
    enable_sentence: false
    strict_spelling: true
    enable_completion: true
    encode_commit_history: false
    tips: "〔笔画反查〕"

  sbyp:
    tag: sbyp
    dictionary: sbpy
    enable_user_dict: false
    enable_encoder: false
    packs:
      - sbpy.base
    prism: sbyp
    prefix: a
    tips: "〔拼音反查〕"

  emoji:
    tag: emoji
    dictionary: sbpy
    enable_user_dict: false
    enable_encoder: false
    packs:
      - sbpy.base
    prism: sbyp
    prefix: e

  zhlf:
    tag: zhlf
    dictionary: zhlf
    enable_user_dict: false
    prefix: i
    tips: "〔两分反查〕"

  sbfc:
    tag: sbfc
    dictionary: sbfc
    enable_user_dict: false
    enable_encoder: false
    enable_sentence: false
    strict_spelling: true
    enable_completion: true
    encode_commit_history: false
    tips: "〔声笔反查〕"

  reverse_lookup:
    tags: [bihua, sbyp, zhlf, sbfc]
    overwrite_comment: true
    dictionary: sbjm.extended

  es_conversion:
    tags: [emoji]
    opencc_config: es.json
    option_name: show_es

rime_key_bindings:
  __append:
    # emacs_editing:
    - { when: composing, accept: Control+p, send: Up }
    - { when: composing, accept: Control+n, send: Down }
    - { when: composing, accept: Control+b, send: Left }
    - { when: composing, accept: Control+f, send: Right }
    - { when: composing, accept: Control+a, send: Home }
    - { when: composing, accept: Control+e, send: End }
    - { when: composing, accept: Control+d, send: Delete }
    - { when: composing, accept: Control+k, send: Shift+Delete }
    - { when: composing, accept: Control+h, send: BackSpace }
    - { when: composing, accept: Control+g, send: Escape }
    - { when: composing, accept: Control+bracketleft, send: Escape }
    - { when: composing, accept: Control+y, send: Page_Up }
    - { when: composing, accept: Alt+v, send: Page_Up }
    - { when: composing, accept: Control+v, send: Page_Down }
    - { when: composing, accept: Control+c, send: Page_Up }
    # numbered_mode_switch:
    - { when: always, accept: Control+Shift+1, select: .next }
    - { when: always, accept: Control+Shift+2, toggle: ascii_mode }
    - { when: always, accept: Control+Shift+3, toggle: full_shape }
    - { when: always, accept: Control+Shift+4, toggle: simplification }
    - { when: always, accept: Control+Shift+5, toggle: extended_charset }
    - { when: always, accept: Control+Shift+exclam, select: .next }
    - { when: always, accept: Control+Shift+at, toggle: ascii_mode }
    - { when: always, accept: Control+Shift+numbersign, toggle: full_shape }
    - { when: always, accept: Control+Shift+dollar, toggle: simplification }
    - { when: always, accept: Control+Shift+percent, toggle: extended_charset }
    # other key bindings
    - { when: has_menu, accept: Tab, send: Page_Down }
    - { when: paging, accept: Shift+Tab, send: Page_Up }
    - { when: has_menu, accept: Shift+Tab, send_sequence: "{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}" }
    - { when: composing, accept: "Control+l", send_sequence: "{Home}{Right}{Right}" }
    - { when: paging, accept: Shift+ISO_Left_Tab, send: Page_Up }
    - { when: has_menu, accept: Shift+ISO_Left_Tab, send_sequence: "{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}{Page_Down}" }
    - { when: composing, accept: Shift+BackSpace, send: Escape }
sbxlm_basic_bindings:
  __append:
    - match: "[bpmfdtnlgkhjqxzcsrywv]{2}"
      accept: ";"
      send_sequence: "{Home}{Right}{space}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv][bpmfdtnlgkhjqxzcsrywv][a-z0-9]"
      accept: ";"
      send_sequence: "{Home}{Right}{space}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv][bpmfdtnlgkhjqxzcsrywv][aeuio]{2}"
      accept: ";"
      send_sequence: "{Home}{Right}{space}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv]{3}"
      accept: "Shift+space"
      send_sequence: "{Home}{Right}{space}{Home}{Right}{space}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z0-9][bpmfdtnlgkhjqxzcsrywv]{2}"
      accept: "Shift+space"
      send_sequence: "{Home}{Right}{Right}{space}{Home}{Right}{space}{space}"
    - match: "([bpmfdtnlgkhjqxzcsrywv][a-z0-9]){2}[aeuio]{0,2}"
      accept: ";"
      send_sequence: "{Home}{Right}{Right}{space}{space}"
sbxlm_extra_bindings:
  __append:
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z]"
      accept: Tab
      send_sequence: "{apostrophe}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z]"
      accept: "'"
      send_sequence: "{apostrophe}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv]{3}"
      accept: Tab
      send_sequence: "{Home}{Right}{Right}{apostrophe}{space}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv]{2}[a-z]"
      accept: "'"
      send_sequence: "{Home}{Right}{space}{apostrophe}{space}"    
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z0-9][bpmfdtnlgkhjqxzcsrywv][a-z]"
      accept: "'"
      send_sequence: "{Home}{Right}{Right}{space}{apostrophe}{space}"
# 用于声笔自整和声笔鹤整的键绑定
zzhz_bindings:
  __append:
    - { when: has_menu, accept: 1, send_sequence: "{Shift+Right}" }
    - { when: has_menu, accept: 4, send_sequence: "{Shift+Right}{Shift+Right}" }
    - { when: has_menu, accept: 5, send_sequence: "{Shift+Right}{Shift+Right}{Shift+Right}" }
    - { when: has_menu, accept: 6, send_sequence: "{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}" }
    - { when: has_menu, accept: 0, send_sequence: "{End}" }
    - { match: "[bpmfdtnlgkhjqxzcsrywv]{3}", accept: "'", send_sequence: "{Home}{Right}{space}2"}
    - { match: "[bpmfdtnlgkhjqxzcsrywv]{3}", accept: "Tab", send_sequence: "{Home}{Right}{Right}2{space}{space}"}
    - { match: "[bpmfdtnlgkhjqxzcsrywv][a-z]{0,1}", accept: "'", send_sequence: "2" }
    - { match: "[bpmfdtnlgkhjqxzcsrywv][a-z]{0,1}", accept: Tab, send_sequence: "2" }
    - { match: "[bpmfdtnlgkhjqxzcsrywv]{2}", accept: ";", send_sequence: "{Home}{Right}{space}{space}"}
    - match: "[bpmfdtnlgkhjqxzcsrywv]{3}"
      accept: "Shift+space"
      send_sequence: "{Home}{Right}{space}{Home}{Right}{space}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z0-9][bpmfdtnlgkhjqxzcsrywv]{2}"
      accept: "Shift+space"
      send_sequence: "{Home}{Right}{Right}{space}{Home}{Right}{space}{space}"
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z][bpmfdtnlgkhjqxzcsrywv]{2}"
      accept: "'"
      send_sequence: "{Home}{Right}{Right}{space}2"
# 用于声笔自整和声笔鹤整的顶屏
zzhz_popping:
  __append:
    - when: popping
      match: "([bpmfdtnlgkhjqxzcsrywv][a-z][aeiou]*)+[aeiou]+"
      accept: "[bpmfdtnlgkhjqxzcsrywv]"
    - when: popping
      match: "([bpmfdtnlgkhjqxzcsrywv][a-z]){1,}[bpmfdtnlgkhjqxzcsrywv]{0,2}"
      accept: ";"
      prefix: 0
      strategy: ignore   
# 用于声笔自然和声笔小鹤的顶屏
zrxh_popping:
  __append:
    # 词组顶
    - match: "[bpmfdtnlgkhjqxzcsrywv][a-z][bpmfdtnlgkhjqxzcsrywvBPMFDTNLGKHJQXZCSRYWV][a-z][aeiou]*"
      accept: "[bpmfdtnlgkhjqxzcsrywv]"
    # 大写字母输入词组
    - when: pro_char
      match: "[bpmfdtnlgkhjqxzcsrywv][a-z]"
      accept: "[BPMFDTNLGKHJQXZCSRYWV]"
      strategy: append
    - when: pro_char
      match: "[bpmfdtnlgkhjqxzcsrywv][a-z][BPMFDTNLGKHJQXZCSRYWV]"
      accept: "[a-z]"
      strategy: append

key_binder:
  bindings:
    __patch:
      - /rime_key_bindings
      - /sbxlm_basic_bindings
      - /sbxlm_extra_bindings

recognizer:
  patterns:
    punct: '^\\([0-9]|10|[A-Za-z][A-Zbpmfdtnlgkhjqxzcsrywv]*)$'
    sbfc: "^[bpmfdtnlgkhjqxzcsrywv][aeiou]{3}$"
    bihua: "^[aeiou]+$"
    sbyp: "^a[bpmfdtnlgkhjqxzcsrywv][a-z']*$"
    emoji: "^e[bpmfdtnlgkhjqxzcsrywv][a-z']*$"
    zhlf: "^i[bpmfdtnlgkhjqxzcsrywv][a-z]*$"
    sbzdy: "^u[bpmfdtnlgkhjqxzcsrywv][a-z]*$"
    jsq: "^=.+$"
    lua: "^o[bpmfdtnlgkhjqxzcsrywv0-9]+$"
    history: "^/$"

punctuator: 
  digit_separator_action: commit
  half_shape: &symtable
    ',' : { commit: ， }
    '.' : { commit: 。 }
    '<' : [ 《, 〈, «, ‹, ↑, ← ]
    '>' : [ 》, 〉, », ›, ↓, → ]
    '/' : [ 、 ]
    '?' : { commit: ？ }
    ';' : { commit: ； }
    ':' : { commit: ： }
    '''' : { pair: [ '‘', '’' ] }
    '"' : { pair: [ '“', '”' ] }
    '\' : [ '\' ]
    '|' : [ ｜, '§', '¦', '‖', '||' ]
    '`' : [ '`', ′, ″, ‴, ‵, ‶, ‷, ⁗ ]
    '~' : [ '~', ～, ˜, ≈, ≋, ≃, ≅, ≇, ∽, ⋍, ≌, ﹏, ﹋, ﹌ ]
    '!' : { commit: ！ }
    '@' : [ '@', ©, ®, ℗ ,＠]
    '#' : [ '#', №, ＃, ⌘ ]
    '%' : [ '%', ％, '°', '℃', ‰, ‱, ℉ ]
    '$' : [ '$', ￥, '€', '£', '¥', '¢', '¤', ₩ ]
    '^' : [……, …, '≠', '≡', '〃', '々',＝]
    '&' : ['&', ＆]
    '*' : [ '*', ＊, ·, ×, ※, ❂, ⁂, ☮, ☯, ☣, ・ ]
    '(' : [（,'(']
    ')' : [）,')']
    '-' : [——, －, '---', '--', '- ']
    '_' : [_, '__', '___', '____', '_____']
    '+' : ['+', ＋]
    '=' : ['=']
    '[' : [ 「, 【, 〔, '[',［ ]
    ']' : [ 」, 】, 〕, ']',］ ]
    '{' : [ 『, 〖, '{',｛ ]
    '}' : [ 』, 〗, '}',｝ ]
  full_shape: *symtable
  symbols:
    __patch:
      - sbfh.yaml:/punctuator/symbols
      - sbfh.yaml:/punctuator/emojis
